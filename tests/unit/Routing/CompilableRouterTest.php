<?php
/**
 *  * Created by mtils on 29.05.2022 at 21:36.
 **/

namespace Ems\Routing;

use Ems\Contracts\Routing\Input;
use Ems\Contracts\Routing\Router as RouterContract;
use Ems\RoutingTrait;
use Ems\TestCase;

class CompilableRouterTest extends TestCase
{
    use RoutingTrait;

    /**
     * @test
     */
    public function it_implements_interface()
    {
        $this->assertInstanceOf(RouterContract::class, $this->make());
    }

    /**
     * @test
     */
    public function compiled_router_skips_normal_router_call()
    {
        $storage = [];

        $base = $this->router(true);
        $router = $this->make($base, $storage);

        $routable = $this->routable('users');
        $routed = $router->route($routable);

        $router->compile();

        $this->assertNotEmpty($storage);

        $emptyRouter = new CompilableRouterTest_Router();
        $router = $this->make($emptyRouter, $storage);

        $this->assertEquals(0, count($emptyRouter->routeCalls));
        $compiledRouted = $router->route($routable);

        $this->assertEquals($routed->getMatchedRoute()->name, $compiledRouted->getMatchedRoute()->name);

        $this->assertCount(0, $emptyRouter->registerCalls);

    }

    protected function make(RouterContract $router=null, &$storage=[]) : CompilableRouter
    {
        return new CompilableRouter($router?:$this->router(true), $storage);
    }

    /**
     * @param bool $filled
     * @return CompilableRouterTest_Router
     */
    protected function router(bool $filled = false): Router
    {
        $router = new CompilableRouterTest_Router();
        if ($filled) {
            $this->fill($router);
        }
        return $router;
    }

}

class CompilableRouterTest_Router extends Router
{
    public $registerCalls = [];
    public $routeCalls = [];

    public function register(callable $registrar, array $attributes = [])
    {
        $this->registerCalls[] = $attributes;
        parent::register($registrar, $attributes);
    }


    public function route(Input $routable): Input
    {
        $this->routeCalls[] = $routable;
        return parent::route($routable); // TODO: Change the autogenerated stub
    }
}