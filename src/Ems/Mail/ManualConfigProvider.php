<?php


namespace Ems\Mail;


use DateTime;
use Ems\Contracts\Mail\MailConfigProvider;

class ManualConfigProvider implements MailConfigProvider
{

    protected $mapResourceNameToTemplate = false;

    protected $defaultTemplate = '';

    protected $senderAddress = '';

    /**
     * {@inheritdoc}
     *
     * @param string $resourceName
     * @param mixed $resourceId (optional)
     * @return \Ems\Contracts\Mail\MailConfig
     **/
    public function configFor($resourceName, $resourceId=null)
    {

        $config = new MailConfig;
        $config->setId(-1);
        $config->setTemplate($this->getTemplate($resourceName));
        $config->setName('Autogenerated Bogus-Config');
        $config->enableGeneratedOccurences(false);
        $config->setSender($this->sender());

        return $config;

    }

    /**
     * Set a sender which sends all emails (address(string) or object)
     *
     * @param mixed $senderAddress
     * @return self
     **/
    public function sendFrom($senderAddress)
    {
        $this->senderAddress = $senderAddress;
        return $this;
    }

    /**
     * Return the sender setted via self::sendFrom
     *
     * @return string
     **/
    public function sender()
    {
        return $this->senderAddress;
    }

    /**
     * If this is set to true, the templatename will be exactly the resourceName.
     *
     * @param bool $map
     * @return $this
     **/
    public function mapResourceNameToTemplate($map=true)
    {
        $this->mapResourceNameToTemplate = $map;
        return $this;
    }

    /**
     * Return the template which should be used everytime
     *
     * @return string
     **/
    public function defaultTemplate()
    {
        return $this->defaultTemplate;
    }

    /**
     * Set the default template
     *
     * @param string $template
     * @return string
     **/
    public function setDefaultTemplate($template)
    {
        $this->defaultTemplate = $template;
        return $this;
    }

    /**
     * Return the template which should be used
     * (depends on self::mapResourceNameToTemplate)
     *
     * @param string $resourceName
     * @return string
     **/
    protected function getTemplate($resourceName)
    {
        if ($this->mapResourceNameToTemplate) {
            return $resourceName;
        }
        return $this->defaultTemplate;
    }
}
